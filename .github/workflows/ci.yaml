name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/todo-api
  NODE_VERSION: '18'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm test
        env:
          USE_MEMORY_STORE: true
          NODE_ENV: test
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Job 2: Code Quality - Linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  # Job 3: Security - Dependency Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Install Snyk CLI (optional)
        run: npm install -g snyk
        continue-on-error: true
      
      - name: Run Snyk security scan
        run: snyk test --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Job 4: Docker Build & Scan
  docker-build-scan:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-test, lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract Git metadata
        id: meta
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.sha_short }}
      
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
      
      - name: Run Trivy vulnerability scanner
        run: |
          trivy image \
            --severity HIGH,CRITICAL \
            --exit-code 0 \
            --format table \
            ${{ env.IMAGE_NAME }}:latest
      
      - name: Run Trivy scan and generate report
        run: |
          trivy image \
            --severity HIGH,CRITICAL \
            --format json \
            --output trivy-report.json \
            ${{ env.IMAGE_NAME }}:latest
      
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json
          retention-days: 7
      
      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }}
          docker push ${{ env.IMAGE_NAME }}:latest
      
      - name: Generate build metadata
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cat > build-metadata.json << EOF
          {
            "image": "${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }}",
            "git_sha": "${{ steps.meta.outputs.sha_short }}",
            "git_branch": "${{ steps.meta.outputs.branch }}",
            "build_timestamp": "${{ steps.meta.outputs.timestamp }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          cat build-metadata.json
      
      - name: Upload build metadata
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-metadata
          path: build-metadata.json
          retention-days: 30

  # Job 5: Deploy (Placeholder - will be implemented with K8s)
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [docker-build-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build metadata
        uses: actions/download-artifact@v4
        with:
          name: build-metadata
      
      - name: Display deployment info
        run: |
          echo "ğŸš€ Deployment Information:"
          cat build-metadata.json
          echo ""
          echo "ğŸ“¦ Image ready for deployment"
          echo "ğŸ”§ Next step: Configure kubectl and deploy to EKS"
          echo ""
          echo "Note: Actual deployment will be configured after EKS setup"